#!/usr/bin/env python3
# Python3 script to enforce consistant theming in GNOME for GTK and Qt apps

import os
from subprocess import call
from pathlib import Path


class GTKTheme:
    name: str
    path: Path

    def __init__(self, path: Path = None, name: str = None):
        self.name = "default" if name is None else name
        self.path = Path("/usr/share/themes") if path is None else path

    def __repr__(self):
        return f"[{self.name} Theme]({self.path})"


class GTKIconPack:
    name: str
    path: Path

    def __init__(self, path: Path = None, name: str = None):
        self.name = "default" if name is None else name
        self.path = Path("/usr/share/themes") if path is None else path

    def __repr__(self):
        return f"[{self.name} Icon Theme]({self.path})"


# Set the users Home directory
_home = Path.home().__str__()
_themesHomeDir = Path(f"{_home}/.themes")
_iconsHomeDir = Path(f"{_home}/.icons")
_configHomeDir = Path(f"{_home}/.config")

# create the home directories if needed.
if not _configHomeDir.exists():
    os.mkdir(_configHomeDir)
if not _themesHomeDir.exists():
    os.mkdir(_themesHomeDir)
if not _iconsHomeDir.exists():
    os.mkdir(_iconsHomeDir)

# Global Paths for use
PATHS = {
    "home": {
        "config": _configHomeDir,
        "themes": _themesHomeDir,
        "icons": _iconsHomeDir
    },
    "share": {
        "themes": Path("/usr/share/themes"),
        "icons": Path("/usr/share/icons")
    }
}
THEME_PATHS = [
    PATHS["home"]['themes'],
    PATHS["share"]['themes'],
]
ICON_PATHS = [
    PATHS["home"]["icons"],
    PATHS["share"]["icons"]
]


def PrintLog(msg: str = "", symbol: str = "‚ÑπÔ∏è"):
    """
    Formatted Logs <3
    """
    if (msg != ""):
        print(f"{symbol}\t{msg}")


def CheckPathByStructure(p: Path = _home, dirChecks: list[Path] = None, fileChecks: list[Path] = None) -> bool:

    if dirChecks is None:
        dirChecks = []
    if fileChecks is None:
        fileChecks = []

    PrintLog(f"Checking {p} folder structure")
    dirCheck = [{"path": path, "result": path.is_dir()} for path in dirChecks]
    PrintLog(f"Checking {p} file structure")
    fileCheck = [{"path": path, "result": path.is_file()} for path in fileChecks]

    results = [*dirCheck, *fileCheck]

    if failedTests := [
        result for result in results if result["result"] == False
    ]:
        PrintLog(f"Failed Theme Check: {str(p).split('/')[-1]}", "‚õîÔ∏è")
        for test in failedTests:
            PrintLog(f"\t{test['path']} doesn't exist", "‚õîÔ∏è")
        return False
    PrintLog(f"Passed Theme Check: {str(p).split('/')[-1]}", "‚úÖ")
    return True


def IsValidTheme(themePath: Path) -> bool:
    dirChecks = [
        # Path(f"{themePath}/gtk-3.0"), # omitted for modern themes
        Path(f"{themePath}/gtk-4.0"),
        Path(f"{themePath}/gnome-shell"),
    ]
    fileChecks = [
        Path(f"{themePath}/index.theme")
    ]
    return CheckPathByStructure(themePath, dirChecks, fileChecks)


def IsValidIconPack(iconPath: Path) -> bool:
    # Seems Icon pack definition is a little difficult
    # to nail down so the icon packs may not be accurate
    # TODO: Figure out Icon Pack Validation
    return CheckPathByStructure(iconPath, [], [Path(f"{iconPath}/index.theme")])


def GetThemes(paths: list[Path] = [Path(f"{Path.home()}/.themes"), Path("/usr/share/themes")]) -> list[GTKTheme]:
    """Searches the given paths for themes

    Args:
        paths (list[Path]): A list of paths where themes are saved/installed, 
        Default: ["~/.themes", /usr/share/themes]

    Returns:
        list[GTKTheme]: List of valid themes
    """
    themes = []
    for path in paths:
        for themeName in os.listdir(path):
            absPath = Path(f"{path}/{themeName}")
            if (IsValidTheme(absPath)):
                themes.append(GTKTheme(absPath, themeName))
    return themes


def GetIconPacks(paths: list[Path] = [Path(f"{Path.home()}/.icons"), Path("/usr/share/icons")]) -> list[GTKIconPack]:
    """Searches the given paths for icon packs

    Args:
        paths (list[Path]): A list of paths where icons are saved/installed, 
        Default: ["~/.icons", /usr/share/icons]

    Returns:
        list[GTKTheme]: List of valid icons
    """
    iconPacks = []
    for path in paths:
        for iconPackName in os.listdir(path):
            absPath = Path(f"{path}/{iconPackName}")
            if (IsValidIconPack(absPath)):
                iconPacks.append(GTKIconPack(absPath, iconPackName))
    return iconPacks


def GetBoolInput(prompt=None):
    choices = ["y", "n"]
    if prompt is None:
        prompt = "Please choose a valid option"
    answer = ""
    while not choices.__contains__(answer):
        answer = input(f"{prompt} (y/n):\t")
        answer = answer.lower()
    return answer == "y"


def ParseInt(value: str, default=0):
    try:
        return int(value)
    except ValueError:
        return default


def UserInputValidNumber(min: int, max: int, prompt: str = "Please enter a valid choice") -> int:
    choice = ParseInt(min-1)
    while choice < min or choice > max:
        print(f"{prompt} ({min}-{max})")
        choice = ParseInt(input(""))
    return ParseInt(choice)


def ChooseByNumber(prompt: str, choices: list[str]) -> int:
    """Requests input of a number from the user and returns the choice-1 under 
    the assumption that the developer will use the return value as an index 
    lookup for a data array

    Args:
        prompt (str): Prompt to show the user above the input
        choices (list[str]): list of string choices for the user to choose from

    Returns:
        int: index of choice from original array
    """
    print("Available Choices:")
    for count, option in enumerate(choices, start=1):
        print(f"{count}.\t{option}")
    return (UserInputValidNumber(1, len(choices), prompt) - 1) or 0


def ChooseTheme(themes: list[GTKTheme]) -> GTKTheme:
    if len(themes):
        choice = ChooseByNumber("Please choose a theme from above", themes)
        return themes[choice]
    return None


def ChooseIconPack(icons: list[GTKIconPack]) -> GTKTheme:
    if len(icons):
        choice = ChooseByNumber("Please choose an icon set from above", icons)
        return icons[choice]
    return None


def SetGsettings(themeName: str = "Adwaita", iconThemeName: str = "Adwaita", prefersDark: bool = True) -> int:

    PrintLog(f"Setting gsettings and dconf values for {themeName}...", "üêß")

    prefersDarkStr = "prefer-dark" if prefersDark else "prefer-light"

    returnCode = call(
        f"gsettings set org.gnome.desktop.interface color-scheme '{prefersDarkStr}'", shell=True)
    returnCode += call(
        f"gsettings set org.gnome.desktop.interface gtk-theme \"{themeName}\"", shell=True)
    returnCode += call(
        f"gsettings set org.gnome.desktop.wm.preferences theme \"{themeName}\"", shell=True)
    returnCode += call(
        f"dconf write /org/gnome/shell/extensions/user-theme/name \"\'{themeName}\'\"", shell=True)
    returnCode += call(
        f"gsettings set org.gnome.desktop.interface icon-theme \"{iconThemeName}\"", shell=True)

    return returnCode


def LinkThemeAdwaita(theme: GTKTheme):

    PrintLog(f"Linking {theme.path} to Adwaita for GTK4.0")
    rmDirs = [
        Path(f"{PATHS['home']['config']}/gtk-4.0/assets")
    ]
    rmFiles = [
        Path(f"{PATHS['home']['config']}/gtk-4.0/gtk.css"),
        Path(f"{PATHS['home']['config']}/gtk-4.0/gtk-dark.css")
    ]
    themeDirs = [
        Path(f"{theme.path}/gtk-4.0/assets")
    ]

    themeFiles = [
        Path(f"{theme.path}/gtk-4.0/gtk.css"),
        Path(f"{theme.path}/gtk-4.0/gtk-dark.css")
    ]

    rmCombined = [*rmDirs, *rmFiles]
    themeCombined = [*themeDirs, *themeFiles]
    for dir in rmDirs:
        try:
            os.removedirs(str(dir))
        except NotADirectoryError:
            PrintLog(
                f"{dir} has already been deleted / never existed, either way it's not a problem")
    for file in rmFiles:
        PrintLog(f"Deleting {file} ready for asset linking", "‚ùå")
        os.remove(file)

    for i, path in enumerate(rmCombined):
        PrintLog(f"Linking \"{themeCombined[i]}\" ‚û°Ô∏è \"{path}\"", "üîó")
        call(f"ln -sf \"{themeCombined[i]}\" \"{path}\"", shell=True)

    return 0


def FixFlatpaks(themeName) -> int:

    PrintLog("Fixing Flatpaks Globally (sudo required)", "ü•∏")
    returnCode = call(
        f"sudo flatpak override --env=GTK_THEME={themeName}", shell=True)
    PrintLog("Setting Theme for all Flatpaks via GTK_THEME env variable", "ü•∏")

    PrintLog("Sharing Icon + Theme Directories with all Flatpaks", "ü•∏")
    for path in [*THEME_PATHS, *ICON_PATHS]:
        returnCode += call(
            f"sudo flatpak override --filesystem={path}", shell=True)

    PrintLog("Sharing xdg-config with all Flatpaks", "ü•∏")
    returnCode += call("sudo flatpak override --filesystem=xdg-config/gtk-3.0", shell=True)
    returnCode += call("sudo flatpak override --filesystem=xdg-config/gtk-4.0", shell=True)

    return returnCode


def AddQtEnvVars():
    bash_profile = Path(f"{Path.home()}/.bash_profile")
    env_vars = [
        "export QT_QPA_PLATFORMTHEME=qt5ct",
        "export QT_QPA_PLATFORMTHEME=qt6ct"
    ]

    # Ensure the file exists
    if not bash_profile.exists():
        PrintLog("Checking .bash_profile for Qt Environment Vars")
        with open(bash_profile, "w") as f:
            pass  # Just create it

    PrintLog("Checking .bash_profile for Qt Environment Vars")
    with open(bash_profile, "r") as f:
        lines = f.read().splitlines()

    with open(bash_profile, "a") as f:
        for env_var in env_vars:
            if all(env_var not in line for line in lines):
                PrintLog(f"Adding Environment Var: {env_var}", "üåê")
                f.write(f"\n{env_var}\n")
            else:
                PrintLog(f"Already exists: {env_var}", "üëå")
    f.close()


def FixQtApps(iconThemeName: str) -> int:
    PrintLog("Creating Qt .config directories")
    qt5ConfDir = Path(f"{PATHS['home']['config']}/qt5ct")
    if not qt5ConfDir.exists():
        os.mkdir(qt5ConfDir)

    qt6ConfDir = Path(f"{PATHS['home']['config']}/qt6ct")
    if not qt6ConfDir.exists():
        os.mkdir(qt6ConfDir)

    PrintLog("Creating Qt .config files")
    qt5ConfFile = Path(f"{PATHS['home']['config']}/qt5ct/qt5ct.conf")
    if not qt5ConfFile.exists():
        os.mkdir(qt5ConfFile)

    qt6ConfFile = Path(f"{PATHS['home']['config']}/qt6ct/qt6ct.conf")
    if not qt6ConfFile.exists():
        os.mkdir(qt6ConfFile)

    qtConfigLines = [
        "[Appearance]",
        "style=Adwaita",
        "color_scheme_path=",
        f"icon_theme={iconThemeName}",
    ]

    # Write to qt5 config
    PrintLog("Writing to Qt config files")
    with open(qt5ConfFile, "w") as conf:
        conf.writelines([f"{line}\n" for line in qtConfigLines])
    conf.close()

    # Write to qt6 config
    with open(qt6ConfFile, "w") as conf:
        conf.writelines([f"{line}\n" for line in qtConfigLines])
    conf.close()

    AddQtEnvVars()


def Main():

    # quick check to see if you have Flatpak on your system
    hasFlatpak = Path("/usr/share/flatpak").exists()
    theme = GTKTheme()
    iconPack = GTKIconPack()
    themes = GetThemes(THEME_PATHS)
    iconPacks = GetIconPacks(THEME_PATHS)

    confirmation = False
    if (len(themes) and len(iconPacks)):
        while not confirmation:
            theme = ChooseTheme(themes)
            iconPack = ChooseIconPack(iconPacks)
            PrintLog("Choices Made", "üìù")
            print(f"- Theme:\t{theme.name} - '{theme.path}'")
            print(f"- Icons:\t{iconPack.name} - '{iconPack.path}'")
            PrintLog("Confirmation Time!", "üëå")
            confirmation = GetBoolInput("Are you happy with your choices?")

        PrintLog(f"Is {theme.name} a Dark Theme?", "‚ùìÔ∏è")
        prefersDark = GetBoolInput()

        # Fixing Gnome Apps
        SetGsettings(theme.name, iconPack.name, prefersDark)
        LinkThemeAdwaita(theme)

        # Fixing Qt Apps
        FixQtApps(iconPack.name)

        # if user has flatpak, do the thing
        if (hasFlatpak):
            FixFlatpaks(theme.name)
        else:
            PrintLog("Flatpak not found, skipping", "üö´")
    else:
        PrintLog("No Themes Found") if not len(themes) else None
        PrintLog("No Icons Found") if not len(iconPacks) else None


if (__name__ == "__main__"):
    Main()
